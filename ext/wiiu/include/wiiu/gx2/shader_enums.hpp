#pragma once

#include <wiiu/types.h>

#define CF_INST_LIST \
	EMIT_CF_INST(NOP, 0x00) \
	EMIT_CF_INST(TEX, 0x01) \
	EMIT_CF_INST(VTX, 0x02) \
	EMIT_CF_INST(VTX_TC, 0x03) \
	EMIT_CF_INST(LOOP_START, 0x04) \
	EMIT_CF_INST(LOOP_END, 0x05) \
	EMIT_CF_INST(LOOP_START_DX10, 0x06) \
	EMIT_CF_INST(LOOP_START_NO_AL, 0x07) \
	EMIT_CF_INST(LOOP_CONTINUE, 0x08) \
	EMIT_CF_INST(LOOP_BREAK, 0x09) \
	EMIT_CF_INST(JUMP, 0x0A) \
	EMIT_CF_INST(PUSH, 0x0B) \
	EMIT_CF_INST(PUSH_ELSE, 0x0C) \
	EMIT_CF_INST(ELSE, 0x0D) \
	EMIT_CF_INST(POP, 0x0E) \
	EMIT_CF_INST(POP_JUMP, 0x0F) \
	EMIT_CF_INST(POP_PUSH, 0x10) \
	EMIT_CF_INST(POP_PUSH_ELSE, 0x11) \
	EMIT_CF_INST(CALL, 0x12) \
	EMIT_CF_INST(CALL_FS, 0x13) \
	EMIT_CF_INST(RETURN, 0x14) \
	EMIT_CF_INST(EMIT_VERTEX, 0x15) \
	EMIT_CF_INST(EMIT_CUT_VERTEX, 0x16) \
	EMIT_CF_INST(CUT_VERTEX, 0x17) \
	EMIT_CF_INST(KILL, 0x18) \
	EMIT_CF_INST(END_PROGRAM, 0x19) \
	EMIT_CF_INST(WAIT_ACK, 0x1A) \
	EMIT_CF_INST(TEX_ACK, 0x1B) \
	EMIT_CF_INST(VTX_ACK, 0x1C) \
	EMIT_CF_INST(VTX_TC_ACK, 0x1D)

#define CF_EXP_INST_LIST \
	EMIT_CF_EXP_INST(MEM_STREAM0, 0x20) \
	EMIT_CF_EXP_INST(MEM_STREAM1, 0x21) \
	EMIT_CF_EXP_INST(MEM_STREAM2, 0x22) \
	EMIT_CF_EXP_INST(MEM_STREAM3, 0x23) \
	EMIT_CF_EXP_INST(MEM_SCRATCH, 0x24) \
	EMIT_CF_EXP_INST(MEM_REDUCTION, 0x25) \
	EMIT_CF_EXP_INST(MEM_RING, 0x26) \
	EMIT_CF_EXP_INST(EXP, 0x27) \
	EMIT_CF_EXP_INST(EXP_DONE, 0x28) \
	EMIT_CF_EXP_INST(MEM_EXPORT, 0x3A)

#define CF_ALU_INST_LIST \
	EMIT_CF_ALU_INST(ALU, 0x08) \
	EMIT_CF_ALU_INST(ALU_PUSH_BEFORE, 0x09) \
	EMIT_CF_ALU_INST(ALU_POP_AFTER, 0x0A) \
	EMIT_CF_ALU_INST(ALU_POP2_AFTER, 0x0B) \
	EMIT_CF_ALU_INST(ALU_EXT, 0x0C) \
	EMIT_CF_ALU_INST(ALU_CONTINUE, 0x0D) \
	EMIT_CF_ALU_INST(ALU_BREAK, 0x0E) \
	EMIT_CF_ALU_INST(ALU_ELSE_AFTER, 0x0F)

#define ALU_OP2_D_LIST \
	EMIT_ALU_OP2(NOP, 0x1A) \
	EMIT_ALU_OP2(SET_MODE, 0x57) \
	EMIT_ALU_OP2(SET_CF_IDX0, 0x58) \
	EMIT_ALU_OP2(SET_CF_IDX1, 0x59)

#define ALU_OP2_DS_LIST \
	EMIT_ALU_OP2(FREXP_64, 0x07) \
	EMIT_ALU_OP2(FRACT, 0x10) \
	EMIT_ALU_OP2(TRUNC, 0x11) \
	EMIT_ALU_OP2(CEIL, 0x12) \
	EMIT_ALU_OP2(RNDNE, 0x13) \
	EMIT_ALU_OP2(FLOOR, 0x14) \
	EMIT_ALU_OP2(MOVA, 0x15) \
	EMIT_ALU_OP2(MOVA_FLOOR, 0x16) \
	EMIT_ALU_OP2(MOVA_INT, 0x18) \
	EMIT_ALU_OP2(MOV, 0x19) \
	EMIT_ALU_OP2(FLT64_TO_FLT32, 0x1C) \
	EMIT_ALU_OP2(FLT32_TO_FLT64, 0x1D) \
	EMIT_ALU_OP2(NOT_INT, 0x33) \
	EMIT_ALU_OP2(FRACT_64, 0x7B)

#define ALU_OP2_DSS_LIST \
	EMIT_ALU_OP2(ADD, 0x00) \
	EMIT_ALU_OP2(MUL, 0x01) \
	EMIT_ALU_OP2(MUL_IEEE, 0x02) \
	EMIT_ALU_OP2(MAX, 0x03) \
	EMIT_ALU_OP2(MIN, 0x04) \
	EMIT_ALU_OP2(MAX_DX10, 0x05) \
	EMIT_ALU_OP2(MIN_DX10, 0x06) \
	EMIT_ALU_OP2(SETE, 0x08) \
	EMIT_ALU_OP2(SETGT, 0x09) \
	EMIT_ALU_OP2(SETGE, 0x0A) \
	EMIT_ALU_OP2(SETNE, 0x0B) \
	EMIT_ALU_OP2(SETE_DX10, 0x0C) \
	EMIT_ALU_OP2(SETGT_DX10, 0x0D) \
	EMIT_ALU_OP2(SETGE_DX10, 0x0E) \
	EMIT_ALU_OP2(SETNE_DX10, 0x0F) \
	EMIT_ALU_OP2(ADD_64, 0x17) \
	EMIT_ALU_OP2(MUL_64, 0x1B) \
	EMIT_ALU_OP2(PRED_SETGT_UINT, 0x1E) \
	EMIT_ALU_OP2(PRED_SETGE_UINT, 0x1F) \
	EMIT_ALU_OP2(PRED_SETE, 0x20) \
	EMIT_ALU_OP2(PRED_SETGT, 0x21) \
	EMIT_ALU_OP2(PRED_SETGE, 0x22) \
	EMIT_ALU_OP2(PRED_SETNE, 0x23) \
	EMIT_ALU_OP2(PRED_SET_INV, 0x24) \
	EMIT_ALU_OP2(PRED_SET_POP, 0x25) \
	EMIT_ALU_OP2(PRED_SET_CLR, 0x26) \
	EMIT_ALU_OP2(PRED_SET_RESTORE, 0x27) \
	EMIT_ALU_OP2(PRED_SETE_PUSH, 0x28) \
	EMIT_ALU_OP2(PRED_SETGT_PUSH, 0x29) \
	EMIT_ALU_OP2(PRED_SETGE_PUSH, 0x2A) \
	EMIT_ALU_OP2(PRED_SETNE_PUSH, 0x2B) \
	EMIT_ALU_OP2(AND_INT, 0x30) \
	EMIT_ALU_OP2(OR_INT, 0x31) \
	EMIT_ALU_OP2(XOR_INT, 0x32) \
	EMIT_ALU_OP2(ADD_INT, 0x34) \
	EMIT_ALU_OP2(SUB_INT, 0x35) \
	EMIT_ALU_OP2(MAX_INT, 0x36) \
	EMIT_ALU_OP2(MIN_INT, 0x37) \
	EMIT_ALU_OP2(MAX_UINT, 0x38) \
	EMIT_ALU_OP2(MIN_UINT, 0x39) \
	EMIT_ALU_OP2(SETE_INT, 0x3A) \
	EMIT_ALU_OP2(SETGT_INT, 0x3B) \
	EMIT_ALU_OP2(SETGE_INT, 0x3C) \
	EMIT_ALU_OP2(SETNE_INT, 0x3D) \
	EMIT_ALU_OP2(SETGT_UINT, 0x3E) \
	EMIT_ALU_OP2(SETGE_UINT, 0x3F) \
	EMIT_ALU_OP2(PRED_SETE_INT, 0x42) \
	EMIT_ALU_OP2(PRED_SETGT_INT, 0x43) \
	EMIT_ALU_OP2(PRED_SETGE_INT, 0x44) \
	EMIT_ALU_OP2(PRED_SETNE_INT, 0x45) \
	EMIT_ALU_OP2(PRED_SETE_PUSH_INT, 0x4A) \
	EMIT_ALU_OP2(PRED_SETGT_PUSH_INT, 0x4B) \
	EMIT_ALU_OP2(PRED_SETGE_PUSH_INT, 0x4C) \
	EMIT_ALU_OP2(PRED_SETNE_PUSH_INT, 0x4D) \
	EMIT_ALU_OP2(PRED_SETLT_PUSH_INT, 0x4E) \
	EMIT_ALU_OP2(PRED_SETLE_PUSH_INT, 0x4F) \
	EMIT_ALU_OP2(DOT4, 0x50) \
	EMIT_ALU_OP2(DOT4_IEEE, 0x51) \
	EMIT_ALU_OP2(CUBE, 0x52) \
	EMIT_ALU_OP2(MAX4, 0x53) \
	EMIT_ALU_OP2(GROUP_BARRIER, 0x54) \
	EMIT_ALU_OP2(GROUP_SEQ_BEGIN, 0x55) \
	EMIT_ALU_OP2(GROUP_SEQ_END, 0x56) \
	EMIT_ALU_OP2(SET_LDS_SIZE, 0x5A) \
	EMIT_ALU_OP2(MUL_INT24, 0x5B) \
	EMIT_ALU_OP2(MULHI_INT24, 0x5C) \
	EMIT_ALU_OP2(MOVA_GPR_INT, 0x60) \
	EMIT_ALU_OP2(ASHR_INT, 0x70) \
	EMIT_ALU_OP2(LSHR_INT, 0x71) \
	EMIT_ALU_OP2(LSHL_INT, 0x72) \
	EMIT_ALU_OP2(LDEXP_64, 0x7A) \
	EMIT_ALU_OP2(PRED_SETGT_64, 0x7C) \
	EMIT_ALU_OP2(PRED_SETE_64, 0x7D) \
	EMIT_ALU_OP2(PRED_SETGE_64, 0x7E)

#define ALU_OP2_KILL_LIST \
	EMIT_ALU_OP2(KILLE, 0x2C) \
	EMIT_ALU_OP2(KILLGT, 0x2D) \
	EMIT_ALU_OP2(KILLGE, 0x2E) \
	EMIT_ALU_OP2(KILLNE, 0x2F) \
	EMIT_ALU_OP2(KILLGT_UINT, 0x40) \
	EMIT_ALU_OP2(KILLGE_UINT, 0x41) \
	EMIT_ALU_OP2(KILLE_INT, 0x46) \
	EMIT_ALU_OP2(KILLGT_INT, 0x47) \
	EMIT_ALU_OP2(KILLGE_INT, 0x48) \
	EMIT_ALU_OP2(KILLNE_INT, 0x49)

#define ALU_OP2_DS_T_LIST \
	EMIT_ALU_OP2(EXP_IEEE, 0x61) \
	EMIT_ALU_OP2(LOG_CLAMPED, 0x62) \
	EMIT_ALU_OP2(LOG_IEEE, 0x63) \
	EMIT_ALU_OP2(RECIP_CLAMPED, 0x64) \
	EMIT_ALU_OP2(RECIP_FF, 0x65) \
	EMIT_ALU_OP2(RECIP_IEEE, 0x66) \
	EMIT_ALU_OP2(RECIPSQRT_CLAMPED, 0x67) \
	EMIT_ALU_OP2(RECIPSQRT_FF, 0x68) \
	EMIT_ALU_OP2(RECIPSQRT_IEEE, 0x69) \
	EMIT_ALU_OP2(SQRT_IEEE, 0x6A) \
	EMIT_ALU_OP2(FLT_TO_INT, 0x6B) \
	EMIT_ALU_OP2(INT_TO_FLT, 0x6C) \
	EMIT_ALU_OP2(UINT_TO_FLT, 0x6D) \
	EMIT_ALU_OP2(SIN, 0x6E) \
	EMIT_ALU_OP2(COS, 0x6F) \
	EMIT_ALU_OP2(RECIP_INT, 0x77) \
	EMIT_ALU_OP2(RECIP_UINT, 0x78) \
	EMIT_ALU_OP2(FLT_TO_UINT, 0x79)

#define ALU_OP2_DSS_T_LIST \
	EMIT_ALU_OP2(MULLO_INT, 0x73) \
	EMIT_ALU_OP2(MULHI_INT, 0x74) \
	EMIT_ALU_OP2(MULLO_UINT, 0x75) \
	EMIT_ALU_OP2(MULHI_UINT, 0x76)

#define ALU_OP3_LIST \
	EMIT_ALU_OP3(BFE_UINT, 0x04) \
	EMIT_ALU_OP3(BFE_INT, 0x05) \
	EMIT_ALU_OP3(BFI_INT, 0x06) \
	EMIT_ALU_OP3(FMA, 0x07) \
	EMIT_ALU_OP3(MULADD_64, 0x08) \
	EMIT_ALU_OP3(MULADD_64_M2, 0x09) \
	EMIT_ALU_OP3(MULADD_64_M4, 0x0A) \
	EMIT_ALU_OP3(MULADD_64_D2, 0x0B) \
	EMIT_ALU_OP3(MULADD, 0x10) \
	EMIT_ALU_OP3(MULADD_M2, 0x11) \
	EMIT_ALU_OP3(MULADD_M4, 0x12) \
	EMIT_ALU_OP3(MULADD_D2, 0x13) \
	EMIT_ALU_OP3(MULADD_IEEE, 0x14) \
	EMIT_ALU_OP3(MULADD_IEEE_M2, 0x15) \
	EMIT_ALU_OP3(MULADD_IEEE_M4, 0x16) \
	EMIT_ALU_OP3(MULADD_IEEE_D2, 0x17) \
	EMIT_ALU_OP3(CNDE, 0x18) \
	EMIT_ALU_OP3(CNDGT, 0x19) \
	EMIT_ALU_OP3(CNDGE, 0x1A) \
	EMIT_ALU_OP3(CNDE_INT, 0x1C) \
	EMIT_ALU_OP3(CNDGT_INT, 0x1D) \
	EMIT_ALU_OP3(CNDGE_INT, 0x1E)

#define ALU_OP3_T_LIST \
	EMIT_ALU_OP3(MUL_LIT, 0x0C) \
	EMIT_ALU_OP3(MUL_LIT_M2, 0x0D) \
	EMIT_ALU_OP3(MUL_LIT_M4, 0x0E) \
	EMIT_ALU_OP3(MUL_LIT_D2, 0x0F)

#define TEX_INST_LIST \
	EMIT_TEX_INST(VTX_FETCH, 0x00) \
	EMIT_TEX_INST(VTX_SEMANTIC, 0x01) \
	EMIT_TEX_INST(MEM, 0x02) \
	EMIT_TEX_INST(LD, 0x03) \
	EMIT_TEX_INST(GET_TEXTURE_INFO, 0x04) \
	EMIT_TEX_INST(GET_SAMPLE_INFO, 0x05) \
	EMIT_TEX_INST(GET_COMP_TEX_LOD, 0x06) \
	EMIT_TEX_INST(GET_GRADIENTS_H, 0x07) \
	EMIT_TEX_INST(GET_GRADIENTS_V, 0x08) \
	EMIT_TEX_INST(GET_LERP, 0x09) \
	EMIT_TEX_INST(KEEP_GRADIENTS, 0x0A) \
	EMIT_TEX_INST(SET_GRADIENTS_H, 0x0B) \
	EMIT_TEX_INST(SET_GRADIENTS_V, 0x0C) \
	EMIT_TEX_INST(PASS, 0x0D) \
	EMIT_TEX_INST(SET_CUBEMAP_INDEX, 0x0E) \
	EMIT_TEX_INST(FETCH4, 0x0F) \
	EMIT_TEX_INST(SAMPLE, 0x10) \
	EMIT_TEX_INST(SAMPLE_L, 0x11) \
	EMIT_TEX_INST(SAMPLE_LB, 0x12) \
	EMIT_TEX_INST(SAMPLE_LZ, 0x13) \
	EMIT_TEX_INST(SAMPLE_G, 0x14) \
	EMIT_TEX_INST(SAMPLE_G_L, 0x15) \
	EMIT_TEX_INST(SAMPLE_G_LB, 0x16) \
	EMIT_TEX_INST(SAMPLE_G_LZ, 0x17) \
	EMIT_TEX_INST(SAMPLE_C, 0x18) \
	EMIT_TEX_INST(SAMPLE_C_L, 0x19) \
	EMIT_TEX_INST(SAMPLE_C_LB, 0x1A) \
	EMIT_TEX_INST(SAMPLE_C_LZ, 0x1B) \
	EMIT_TEX_INST(SAMPLE_C_G, 0x1C) \
	EMIT_TEX_INST(SAMPLE_C_G_L, 0x1D) \
	EMIT_TEX_INST(SAMPLE_C_G_LB, 0x1E) \
	EMIT_TEX_INST(SAMPLE_C_G_LZ, 0x1F)

#define VTX_INST_LIST \
	EMIT_VTX_INST(FETCH, 0x00) \
	EMIT_VTX_INST(SEMANTIC, 0x01) \
	EMIT_VTX_INST(BUFINFO, 0x0E)

#define MEM_INST_LIST \
	EMIT_MEM_INST(RD_SCRATCH, 0x00) \
	EMIT_MEM_INST(RD_REDUC, 0x01) \
	EMIT_MEM_INST(RD_SCATTER, 0x02) \
	EMIT_MEM_INST(LOCAL_DS_WRITE, 0x04) \
	EMIT_MEM_INST(LOCAL_DS_READ, 0x05) \
	EMIT_MEM_INST(DS_GLOBAL_WRITE, 0x06) \
	EMIT_MEM_INST(DS_GLOBAL_READ, 0x07) \
	EMIT_MEM_INST(MEM_GDS, 0x08) \
	EMIT_MEM_INST(TF_WRITE, 0x09)

#undef EMIT_CF_INST
#define EMIT_CF_INST(inst, value) inst = value,
enum class CF_INST : u32 { CF_INST_LIST };

#undef EMIT_CF_EXP_INST
#define EMIT_CF_EXP_INST(inst, value) inst = value,
enum class CF_INST_EXP : u32 { CF_EXP_INST_LIST };

#undef EMIT_CF_ALU_INST
#define EMIT_CF_ALU_INST(inst, value) inst = value,
enum class CF_INST_ALU : u32 { CF_ALU_INST_LIST };

#undef EMIT_ALU_OP2
#define EMIT_ALU_OP2(inst, value) inst = value,
enum class ALU_OP2_INST : u32 {
	ALU_OP2_D_LIST ALU_OP2_DS_LIST ALU_OP2_DSS_LIST ALU_OP2_KILL_LIST ALU_OP2_DS_T_LIST ALU_OP2_DSS_T_LIST
};

#undef EMIT_ALU_OP3
#define EMIT_ALU_OP3(inst, value) inst = value,

enum class ALU_OP3_INST : u32 { ALU_OP3_LIST ALU_OP3_T_LIST };

#undef EMIT_TEX_INST
#define EMIT_TEX_INST(inst, value) inst = value,

enum class TEX_INST : u32 { TEX_INST_LIST };

#undef EMIT_VTX_INST
#define EMIT_VTX_INST(inst, value) inst = value,

enum class VTX_INST : u32 { VTX_INST_LIST };

enum class ALU_OMOD : u32 {
	OFF = 0x0,
	M2 = 0x1,
	M4 = 0x2,
	D2 = 0x3,
};

enum class EXECUTE_MASK_OP : u32 {
	DEACTIVATE = 0x0,
	BREAK = 0x1,
	CONTINUE = 0x2,
	KILL = 0x3,
};

enum ExportType : u32 {
	EXPORT_TYPE_PIX = 0x0000,
	PIX0 = EXPORT_TYPE_PIX | 0x00,
	PIX1,
	PIX2,
	PIX3,
	PIX4,
	PIX5,
	PIX6,
	PIX7,
	Z_OUT = EXPORT_TYPE_PIX | 0x3D,
	EXPORT_TYPE_POS = 0x2000,
	POS0 = EXPORT_TYPE_POS | 0x3C,
	POS1,
	POS2,
	POS3,
	EXPORT_TYPE_PARAM = 0x4000,
	PARAM0 = EXPORT_TYPE_PARAM | 0x00,
	PARAM1,
	PARAM2,
	PARAM3,
	PARAM4,
	PARAM5,
	PARAM6,
	PARAM7,
	PARAM8, /* .. 31 */
	EXPORT_TYPE_MASK = 0x6000,
};

enum class BankSwizzle : u32 {
	ALU_VEC_012 = 0x0,
	ALU_VEC_021 = 0x1,
	ALU_VEC_120 = 0x2,
	ALU_VEC_102 = 0x3,
	ALU_VEC_201 = 0x4,
	ALU_VEC_210 = 0x5,

	ALU_SCL_210 = 0x0,
	ALU_SCL_122 = 0x1,
	ALU_SCL_212 = 0x2,
	ALU_SCL_221 = 0x3,
};

enum CoordType : u32 {
	TEX_UNNORMALIZED,
	TEX_NORMALIZED,
};

enum KCacheMode : u32 {
	CF_KCACHE_BANK_LOCK_NONE = 0,
	CF_KCACHE_BANK_LOCK_1 = 0x1,
	CF_KCACHE_BANK_LOCK_2 = 0x2,
};

#undef EMIT_CF_INST
#define EMIT_CF_INST(inst, value) \
	case CF_INST::inst: return #inst;
static inline const char *GetInstName(CF_INST inst) {
	switch (inst) {
		CF_INST_LIST
	default: return "UNKNOWN";
	}
}

#undef EMIT_CF_EXP_INST
#define EMIT_CF_EXP_INST(inst, value) \
	case CF_INST_EXP::inst: return #inst;
static inline const char *GetInstName(CF_INST_EXP inst) {
	switch (inst) {
		CF_EXP_INST_LIST
	default: return "UNKNOWN";
	}
}

#undef EMIT_CF_ALU_INST
#define EMIT_CF_ALU_INST(inst, value) \
	case CF_INST_ALU::inst: return #inst;
static inline const char *GetInstName(CF_INST_ALU inst) {
	switch (inst) {
		CF_ALU_INST_LIST
	default: return "UNKNOWN";
	}
}

#undef EMIT_ALU_OP2
#define EMIT_ALU_OP2(inst, value) \
	case ALU_OP2_INST::inst: return #inst;
static inline const char *GetInstName(ALU_OP2_INST inst) {
	switch (inst) {
		ALU_OP2_D_LIST
		ALU_OP2_DS_LIST
		ALU_OP2_DSS_LIST
		ALU_OP2_KILL_LIST
		ALU_OP2_DS_T_LIST
		ALU_OP2_DSS_T_LIST
	default: return "UNKNOWN";
	}
}

#undef EMIT_ALU_OP3
#define EMIT_ALU_OP3(inst, value) \
	case ALU_OP3_INST::inst: return #inst;
static inline const char *GetInstName(ALU_OP3_INST inst) {
	switch (inst) {
		ALU_OP3_LIST
		ALU_OP3_T_LIST
	default: return "UNKNOWN";
	}
}

#undef EMIT_TEX_INST
#define EMIT_TEX_INST(inst, value) \
	case TEX_INST::inst: return #inst;
static inline const char *GetInstName(TEX_INST inst) {
	switch (inst) {
		TEX_INST_LIST
	default: return "UNKNOWN";
	}
}

#undef EMIT_ALU_OP2
#define EMIT_ALU_OP2(inst, value) case ALU_OP2_INST::inst:
static inline int GetOperandsCount(ALU_OP2_INST inst) {
	switch (inst) {
		ALU_OP2_D_LIST
		return 0;
		ALU_OP2_DS_LIST
		ALU_OP2_DS_T_LIST
		return 1;
	default: return 2;
	}
}

#undef EMIT_ALU_OP2
#define EMIT_ALU_OP2(inst, value) case ALU_OP2_INST::inst:
static inline bool ALU_OP_IS_TRANS(ALU_OP2_INST inst) {
	switch (inst) {
		ALU_OP2_DS_T_LIST
		ALU_OP2_DSS_T_LIST
		return true;
	default: return false;
	}
}

#undef EMIT_ALU_OP3
#define EMIT_ALU_OP3(inst, value) case ALU_OP3_INST::inst:
static inline bool ALU_OP_IS_TRANS(ALU_OP3_INST inst) {
	switch (inst) {
		ALU_OP3_T_LIST
		return true;
	default: return false;
	}
}
